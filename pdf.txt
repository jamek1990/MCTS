import PyPDF2
import re

def extract_financial_data(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # Przykładowe wyrażenia regularne - należy dostosować do konkretnego formatu PIT
    income_pattern = r"Dochód: (\d+,\d{2})"
    loss_pattern = r"Strata: (\d+,\d{2})"
    
    income = re.search(income_pattern, text)
    loss = re.search(loss_pattern, text)
    
    return {
        "income": income.group(1) if income else "Nie znaleziono",
        "loss": loss.group(1) if loss else "Nie znaleziono"
    }

# Użycie funkcji
pdf_path = "sciezka/do/twojego/pit.pdf"
result = extract_financial_data(pdf_path)
print(f"Dochód: {result['income']}")
print(f"Strata: {result['loss']}")


import pytesseract
from pdf2image import convert_from_path
import re

def extract_financial_data_ocr(pdf_path):
    # Konwertuj PDF na obrazy
    images = convert_from_path(pdf_path)
    
    # Ekstrahuj tekst z wszystkich stron
    text = ""
    for image in images:
        text += pytesseract.image_to_string(image, lang='pol')
    
    # Przykładowe wyrażenia regularne - należy dostosować do konkretnego formatu PIT
    income_pattern = r"Dochód:?\s*(\d+[\s,.]?\d*)"
    loss_pattern = r"Strata:?\s*(\d+[\s,.]?\d*)"
    
    income = re.search(income_pattern, text)
    loss = re.search(loss_pattern, text)
    
    return {
        "income": income.group(1).replace(" ", "") if income else "Nie znaleziono",
        "loss": loss.group(1).replace(" ", "") if loss else "Nie znaleziono"
    }

# Użycie funkcji
pdf_path = "sciezka/do/twojego/pit.pdf"
result = extract_financial_data_ocr(pdf_path)
print(f"Dochód: {result['income']}")
print(f"Strata: {result['loss']}")


import re

pattern = r'\b(?:\d+\s?)*\d+,\d{2}\b'

test_strings = [
    "123,45",
    "1 234,56",
    "12 34 56,78",
    "1234,5",  # Nie powinno pasować (tylko jedna cyfra po przecinku)
    "1234.56",  # Nie powinno pasować (kropka zamiast przecinka)
    "1,23",  # Nie powinno pasować (tylko jedna cyfra przed przecinkiem)
    "1 234,567",  # Nie powinno pasować (trzy cyfry po przecinku)
    "1 234 567,89",
    "10 000 000,00",
]

for string in test_strings:
    matches = re.findall(pattern, string)
    if matches:
        print(f"Dopasowano: {matches}")
    else:
        print(f"Nie dopasowano: {string}")
