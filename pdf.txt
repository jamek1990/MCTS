import PyPDF2
import re

def extract_financial_data(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # Przykładowe wyrażenia regularne - należy dostosować do konkretnego formatu PIT
    income_pattern = r"Dochód: (\d+,\d{2})"
    loss_pattern = r"Strata: (\d+,\d{2})"
    
    income = re.search(income_pattern, text)
    loss = re.search(loss_pattern, text)
    
    return {
        "income": income.group(1) if income else "Nie znaleziono",
        "loss": loss.group(1) if loss else "Nie znaleziono"
    }

# Użycie funkcji
pdf_path = "sciezka/do/twojego/pit.pdf"
result = extract_financial_data(pdf_path)
print(f"Dochód: {result['income']}")
print(f"Strata: {result['loss']}")


import pytesseract
from pdf2image import convert_from_path
import re

def extract_financial_data_ocr(pdf_path):
    # Konwertuj PDF na obrazy
    images = convert_from_path(pdf_path)
    
    # Ekstrahuj tekst z wszystkich stron
    text = ""
    for image in images:
        text += pytesseract.image_to_string(image, lang='pol')
    
    # Przykładowe wyrażenia regularne - należy dostosować do konkretnego formatu PIT
    income_pattern = r"Dochód:?\s*(\d+[\s,.]?\d*)"
    loss_pattern = r"Strata:?\s*(\d+[\s,.]?\d*)"
    
    income = re.search(income_pattern, text)
    loss = re.search(loss_pattern, text)
    
    return {
        "income": income.group(1).replace(" ", "") if income else "Nie znaleziono",
        "loss": loss.group(1).replace(" ", "") if loss else "Nie znaleziono"
    }

# Użycie funkcji
pdf_path = "sciezka/do/twojego/pit.pdf"
result = extract_financial_data_ocr(pdf_path)
print(f"Dochód: {result['income']}")
print(f"Strata: {result['loss']}")


import re

pattern = r'\b(?:\d+\s?)*\d+,\d{2}\b'

test_strings = [
    "123,45",
    "1 234,56",
    "12 34 56,78",
    "1234,5",  # Nie powinno pasować (tylko jedna cyfra po przecinku)
    "1234.56",  # Nie powinno pasować (kropka zamiast przecinka)
    "1,23",  # Nie powinno pasować (tylko jedna cyfra przed przecinkiem)
    "1 234,567",  # Nie powinno pasować (trzy cyfry po przecinku)
    "1 234 567,89",
    "10 000 000,00",
]

for string in test_strings:
    matches = re.findall(pattern, string)
    if matches:
        print(f"Dopasowano: {matches}")
    else:
        print(f"Nie dopasowano: {string}")

import re

def extract_between_tags(text, start_tag, end_tag):
    pattern = rf"{start_tag}(.*?){end_tag}"
    match = re.search(pattern, text, re.DOTALL)
    return match.group(1).strip() if match else None

# Przykładowy tekst
sample_text = """
<FAMILY_NAME>
Kowalski
</FAMILY_NAME>
Inne informacje...
<IMIONA RODZICÓW>
Jan i Anna
</IMIONA RODZICÓW>
"""

result = extract_between_tags(sample_text, r"<FAMILY_NAME>", r"<IMIONA RODZICÓW>")
print(result)


import cv2

def czy_zdjecie_odwrocone(sciezka_do_zdjecia):
    """
    Sprawdza, czy zdjęcie jest odwrócone (do góry nogami).

    Args:
        sciezka_do_zdjecia (str): Ścieżka do pliku ze zdjęciem.

    Returns:
        bool: True, jeśli zdjęcie jest odwrócone, False w przeciwnym razie.
    """

    img = cv2.imread(sciezka_do_zdjecia)

    if img is None:
        return False  # Nie udało się wczytać zdjęcia

    # Wykrywanie twarzy na zdjęciu
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)   

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    if len(faces) == 0:
        return   
 False  # Nie znaleziono twarzy, trudno określić orientację

    # Sprawdzenie, czy współrzędne y oczu są "normalne" (oczy poniżej nosa)
    for (x, y, w, h) in faces:
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]

        eyes = eye_cascade.detectMultiScale(roi_gray)
        if len(eyes)   
 != 2:
            continue  # Nie znaleziono dwóch oczu, pomijamy tę twarz

        eye_1, eye_2 = eyes
        if eye_1[1] > eye_2[1]:  # Zamiana, jeśli eye_1 jest niżej
            eye_1, eye_2 = eye_2, eye_1

        if eye_1[1] > y + h / 2: 
            return True  # Jeśli oko jest poniżej połowy twarzy, zdjęcie jest prawdopodobnie odwrócone

    return False

# Przykład użycia
sciezka = 'moje_zdjecie.jpg'
if czy_zdjecie_odwrocone(sciezka):
    print("Zdjęcie jest odwrócone!")
else:
    print("Zdjęcie jest w poprawnej orientacji.")
